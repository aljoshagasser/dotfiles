" Use pathogen for bundle management -
" http://www.vim.org/scripts/script.php?script_id=2332
filetype off 
call pathogen#infect() 
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

" Set the colorscheme
colorscheme molokai

" Directory for swap files
set directory=~/.tmp/vim-rodrigo

" Real men don't use vi
set nocompatible

filetype plugin indent on

" Reload .vimrc right after saving
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Open .vimrc file
nmap <leader>v :e ~/.vimrc<CR>

" Only use one snippet directory
let g:snippets_dir='~/.vim/snippets'

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set virtualedit=block      " allow virtual edit in visual block ..
syntax on                  " syntax highlighting

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" Toggle 'set list'
nmap <leader>l :set list!<CR>

" exit to normal mode with 'jj'
inoremap jj <ESC>

" write file
map WW :w!<CR>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------
set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch             " highlight searches 
set visualbell             " shut the fuck up

" ----------------------------------------------------------------------------
"  Folding
" ----------------------------------------------------------------------------
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set foldenable        "fold by default
set foldlevel=5        "default fold level


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>


" ---------------------------------------------------------------------------
"  Omni Completion 
" ---------------------------------------------------------------------------
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType scss set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete 

autocmd BufNewFile,BufRead *.html.erb set filetype=html.eruby
au BufRead,BufNewFile *.scss set filetype=scss

" ---------------------------------------------------------------------------
"  Aliases 
" ---------------------------------------------------------------------------
set grepprg=ack            " Fuck grep 

" ---------------------------------------------------------------------------
" TODO HAX 
" ---------------------------------------------------------------------------
map <leader>T :Ack --all --ignore-dir=vendor/rails TODO *<CR>
map <leader>F :Ack --all --ignore-dir=vendor/rails FIXME *<CR>
map <leader>C :Ack --all --ignore-dir=vendor/rails CHANGED *<CR>

" ---------------------------------------------------------------------------
" CTAGS
" ---------------------------------------------------------------------------
"map <leader>ta :exec("tag ".expand("<cword>"))<CR>
"map <leader>ts :vsp <CR>:exec("tag " .expand("<cword>"))<CR>
"set tags=./tags;

" ---------------------------------------------------------------------------
" ALL KINDS OF SHIT
" ---------------------------------------------------------------------------
map <S-Enter> O<ESC> 
map <Enter> o<ESC>

" ---------------------------------------------------------------------------
"  FUZZYFINDER 
" ---------------------------------------------------------------------------
map <Leader>b :FufBuffer<CR>
let g:fuzzy_ignore = '.o;.obj;.bak;.exe;.pyc;.pyo;.DS_Store;.db'

" ---------------------------------------------------------------------------
"  COMMANDT 
" ---------------------------------------------------------------------------
let g:CommandTMatchWindowAtTop = 1
map <Leader>t :CommandT<CR>
map <leader>r :CommandTFlush<CR>
set wildignore+=vendor/rails/*

" ---------------------------------------------------------------------------
"  NERDTree 
" ---------------------------------------------------------------------------
:noremap <Leader>n :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=1 " User instead of Netrw when doing an edit /foobar
let NERDTreeMouseMode=1 " Single click for everything

" ---------------------------------------------------------------------------
"  NERD Commenter 
" ---------------------------------------------------------------------------
let NERDCreateDefaultMappings=0 " I turn this off to make it simple
:map <Leader>c :call NERDComment(0, "toggle")<CR> 
